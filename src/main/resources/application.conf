evse {
  api {
    # This is the bind address and normally won't require explicit setting
    host = "0.0.0.0"
    host = ${?API_HOST} # retained until new env vars work everywhere
    host = ${?ETP_SERVICE_API_HOST}

    # Port to run HTTP REST service on
    port = 8000
    port = ${?API_PORT} # retained until new env vars work everywhere
    port = ${?ETP_SERVICE_API_PORT}

    # Static list of devices to serve until we talk to database somewhere
    device-id-whitelist = ""
    device-id-whitelist = ${?DEVICE_ID_WHITELIST} # retained until new env vars work everywhere
    device-id-whitelist = ${?ETP_SERVICE_API_DEVICE_ID_WHITELIST}

    # Use Auth0 middleware to enforce authentication
    require-authentication = true
    require-authentication = ${?SERVICE_API_REQUIRE_AUTHENTICATION} # retained until new env vars work everywhere
    require-authentication = ${?ETP_SERVICE_API_REQUIRE_AUTHENTICATION}

    # Azure IoT Service connection details
    azure-iot {
      connection-string = ""
      connection-string = ${?DEVICE_TWIN_SERVICE_CONNECTION_STRING} # retained until new env vars work everywhere
      connection-string = ${?ETP_SERVICE_API_AZURE_IOT_CONNECTION_STRING}
    }

    kafka {
      hosts = "localhost:9092"
      hosts = ${?ETP_SERVICE_API_KAFKA_HOST}
      topic-name = "test"
      topic-name = ${?ETP_SERVICE_API_KAFKA_TOPIC}
      consumer-group-name = "dispatch-server"
      consumer-group-name = ${?ETP_SERVICE_API_CONSUMER_GROUP}
    }

    schema-registry {
      uri = ""
      uri = ${?ETP_SERVICE_API_SR_ENDPOINT}
      user = ""
      user = ${?ETP_SERVICE_API_SR_USERNAME}
      password = ""
      password = ${?ETP_SERVICE_API_SR_PASSWORD}
    }
  }
}

akka.kafka.consumer {
  # Tuning property of scheduled polls.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 50ms

  # The stage will be await outstanding offset commit requests before
  # shutting down, but if that takes longer than this timeout it will
  # stop forcefully.
  stop-timeout = 30s

  # How long to wait for `KafkaConsumer.close`
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `CommitTimeoutException`.
  commit-timeout = 15s

  # If commits take longer than this time a warning is logged
  commit-time-warning = 1s

  # If the KafkaConsumer can't connect to the broker the poll will be
  # aborted after this timeout. The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException which will be ignored
  # until max-wakeups limit gets exceeded.
  wakeup-timeout = 3s

  # After exceeding maxinum wakeups the consumer will stop and the stage will fail.
  max-wakeups = 10

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    # Disable auto-commit by default
    enable.auto.commit = false
    security.protocol = "SSL"
    ssl.keystore.type = "JKS"
    ssl.truststore.location = ${ETP_SERVICE_API_KAFKA_CLIENT_TRUSTSTORE_LOCATION}
    ssl.truststore.password = ${ETP_SERVICE_API_KAFKA_CLIENT_KEYSTORE_PASSWORD}
    ssl.keystore.location = ${ETP_SERVICE_API_KAFKA_CLIENT_KEYSTORE_LOCATION}
    ssl.keystore.password = ${ETP_SERVICE_API_KAFKA_CLIENT_KEYSTORE_PASSWORD}
    ssl.key.password = ${ETP_SERVICE_API_KAFKA_CLIENT_KEYSTORE_PASSWORD}
  }
}

auth-zero-middleware {
  jwks-uri = "https://dev.service.evse.ovoenergy.com/"
  jwks-uri = ${?AUTH_ZERO_JWKS_URI} # retained until new env vars work everywhere
  jwks-uri = ${?ETP_SERVICE_API_AUTH_ZERO_JWKS_URI}
}
